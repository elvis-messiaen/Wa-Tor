# Choisir al√©atoirement une case vide
import random
from interface import 
class Fish:
    def __init__(self, x : int , y: int , reproduction_time, Alive : bool,):
        """
        Initialise un poisson avec :
        - sa position (x, y)
        - un compteur d'√¢ge (initialis√© √† 0)
        - un temps de reproduction requis
        """
        self.x = x  # Coordonn√©e horizontale dans la grille
        self.y = y  # Coordonn√©e verticale dans la grille
        self.age = 0  # Nombre de chronons √©coul√©s depuis la naissance
        self.reproduction_time = reproduction_time  # Chronons n√©cessaires avant reproduction
    
    def Step(self):
        """
        - Le poisson vieillit d'un tour(chronon).
        """
        self.age += 1
    

    def reproduce(self):
        """
        Cr√©e un nouveau poisson (reproduction).
        Le parent garde sa position mais son √¢ge est remis √† z√©ro.
        Le nouveau poisson sera plac√© ailleurs (√† d√©finir √† l‚Äôext√©rieur).
        """
        self.age = 0  # R√©initialise l'√¢ge du parent apr√®s reproduction
        return Fish(self.x, self.y, self.reproduction_time)  # B√©b√© poisson √† m√™me position (√† ajuster ensuite)
    
    def move (self):
        """
        D√©place le poisson vers une case vide disponible autour de lui.
        - empty_cells est une liste de positions (x, y)
        - Si aucune case vide, il ne bouge pas
        """
        if empty:
            new_position = random.choice(empty)
            self.x, self.y = new_position  # Met √† jour la position du poisson
    
    def choose_direction(self):
    direction = randint(0, 1)  # Choisit al√©atoirement 0 (horizontal) ou 1 (vertical)
    sign = 2 * randint(0, 1) - 1  # G√©n√®re -1 ou +1 (c‚Äôest le sens du d√©placement)
    if direction == 0:
        return (sign, 0)  # D√©placement horizontal : √† gauche ou √† droite
    else:
        return (0, sign)  # D√©placement vertical : en haut ou en bas


    def Position(self):
        """
        Retourne la position actuelle du poisson (utile pour la grille).
        """
        return (self.x, self.y)
    
    def __str__(self):
        """
        Repr√©sentation visuelle du poisson (utilis√©e lors de l'affichage de la grille).
        """
        return "üêü"
    
    